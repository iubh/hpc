AWSTemplateFormatVersion: "2010-09-09"
Description: iu-HPC

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: ""
        Parameters:
          - AdminPassword
          - VpcId
          - PublicSubnetAId
          - PublicSubnetBId
          - PrivateSubnetAId
          - FSx
          - AD
          - ADDNS0
          - ADDNS1
    ParameterLabels:
      AdminPassword:
        default: "Password:"
      VpcId:
        default: "VPC:"
      PublicSubnetAId:
        default: "Public Subnet 1:"
      PublicSubnetBId:
        default: "Public Subnet 2:"
      PrivateSubnetAId:
        default: "Private Subnet:"
      FSx:
        default: "FSx:"
      AD:
        default: "Active Directory:"
      ADDNS0:
        default: "Primary DNS IP:"
      ADDNS1:
        default: "Secondary DNS IP:"

Parameters:
  AdminPassword:
    Description: 'Please, enter the Admin password for your Active Direcotry.This will also be the "ec2-user" password. (Min 8 chars, three of: lowercase, uppercase, number and symbols)'
    Type: String
    MinLength: "8"
    MaxLength: "255"
    AllowedPattern: (?=^.{8,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    NoEcho: "true"

  VpcId:
    Description: 'Please, enter your VPC ID, or just leave "AUTO" if you want to re-use an existing one.'
    Type: String
    AllowedPattern: ^(AUTO|vpc-[0-9a-z]+)$
    Default: AUTO

  PublicSubnetAId:
    Description: 'Please, enter the ID of the Public Subnet you wish to use, or just leave "AUTO" if you want to re-use an existing one.'
    Type: String
    AllowedPattern: ^(AUTO|subnet-[0-9a-z]+)$
    Default: AUTO

  PublicSubnetBId:
    Description: 'Please, enter another ID of the Public Subnet you wish to use, or just leave "AUTO" if you want to re-use an existing one.'
    Type: String
    AllowedPattern: ^(AUTO|subnet-[0-9a-z]+)$
    Default: AUTO

  PrivateSubnetAId:
    Description: 'Please, enter the ID of the Private Subnet you wish to use, or put NONE if you want to use only Public Subnets, or just leave "AUTO" if you want to re-use an existing one.'
    Type: String
    AllowedPattern: ^(AUTO|NONE|subnet-[0-9a-z]+)$
    Default: AUTO

  FSx:
    Description: 'Please, enter your FSx ID, or just leave "AUTO" if you want to re-use an existing one.'
    Type: String
    AllowedPattern: ^(AUTO|fs-[0-9a-z]+)$
    Default: AUTO

  AD:
    Description: 'Please, enter your Active Directory ID, or just leave "AUTO" if you want to create a new one.'
    Type: String
    AllowedPattern: ^(AUTO|d-[0-9a-z]+)$
    Default: AUTO

  ADDNS0:
    Description: "Please enter IP of the first DNS server of the custom AD domain"
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    Default: "0.0.0.0"

  ADDNS1:
    Description: "Please enter IP of the first DNS server of the custom AD domain"
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    Default: "0.0.0.0"

Mappings:
  RegionMap:
    us-east-1:
      ZoneId1: use1-az6
      ZoneId2: use1-az4
      DbInstanceType: db.t4g.micro
    us-east-2:
      ZoneId1: use2-az2
      ZoneId2: use2-az3
      DbInstanceType: db.t4g.micro
    us-west-1:
      ZoneId1: usw1-az1
      ZoneId2: usw1-az3
      DbInstanceType: db.t4g.micro
    us-west-2:
      ZoneId1: usw2-az1
      ZoneId2: usw2-az2
      DbInstanceType: db.t4g.micro
    eu-central-1:
      ZoneId1: euc1-az3
      ZoneId2: euc1-az2
      DbInstanceType: db.t4g.micro
    eu-west-1:
      ZoneId1: euw1-az1
      ZoneId2: euw1-az2
      DbInstanceType: db.t4g.micro
    eu-north-1:
      ZoneId1: eun1-az2
      ZoneId2: eun1-az1
      DbInstanceType: db.t4g.micro
    ca-central-1:
      ZoneId1: cac1-az2
      ZoneId2: cac1-az1
      DbInstanceType: db.t4g.micro
    eu-south-1:
      ZoneId1: eus1-az2
      ZoneId2: eus1-az1
      DbInstanceType: db.t3.micro
    ap-east-1:
      ZoneId1: ape1-az3
      ZoneId2: ape1-az2
      DbInstanceType: db.t4g.micro
    ap-northeast-1:
      ZoneId1: apne1-az4
      ZoneId2: apne1-az1
      DbInstanceType: db.t4g.micro
    ap-northeast-2:
      ZoneId1: apne2-az1
      ZoneId2: apne2-az3
      DbInstanceType: db.t4g.micro
    ap-south-1:
      ZoneId1: aps1-az2
      ZoneId2: aps1-az3
      DbInstanceType: db.t4g.micro

Conditions:
  CreateVpc: !Equals [!Ref VpcId, AUTO]
  CreatePrivateSubnet:
    !And [!Condition CreateVpc, !Equals [!Ref PrivateSubnetAId, AUTO]]
  CreateAD: !Equals [!Ref AD, AUTO]

Resources:
  Cloud9Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
                - s3.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"

  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: Cloud9Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName:
            Fn::Join:
              - ""
              - - LambdaExecutionRole-
                - Ref: AWS::Region
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - ec2:DescribeInstances
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - iam:ListInstanceProfiles
                  - iam:PassRole
                Resource: "*"

  Cloud9BootstrapAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref Cloud9SSMDocument
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref Cloud9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrap
          Values:
            - !Sub
              - ${AWS::StackName}-${RANDOM}
              - RANDOM:
                  !Select [
                    0,
                    !Split [
                      "-",
                      !Select [2, !Split ["/", !Ref "AWS::StackId"]],
                    ],
                  ]

  VPC:
    Type: "AWS::EC2::VPC"
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-HPC-VPC"

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/18
      AvailabilityZone: !GetAtt AvailabiltyZone1.ZoneName
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public-SubnetA"

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.64.0/18
      AvailabilityZone: !GetAtt AvailabiltyZone2.ZoneName
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public-SubnetB"

  InternetGatewayA:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpc

  AttachGatewayA:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpc
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGatewayA

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpc
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public-Route-AB"
  PublicRoute1:
    Type: AWS::EC2::Route
    Condition: CreateVpc
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayA

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateSubnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !GetAtt AvailabiltyZone1.ZoneName
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private-SubnetA"

  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    Condition: CreatePrivateSubnet
    DependsOn: AttachGatewayA
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Condition: CreatePrivateSubnet
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Condition: CreatePrivateSubnet
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private-Route-A"

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Condition: CreatePrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow https and http"
      VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  PCAdditionalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow 8443 and 80 from the ALB"
      VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: udp
          FromPort: 389
          ToPort: 389
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  ServerlessDatabaseClusterParameterGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties:
      Description: Cluster parameter group for aurora-mysql5.7
      Family: aurora-mysql5.7
      Parameters:
        require_secure_transport: "ON"
        innodb_lock_wait_timeout: "900"
      Tags:
        - Key: "parallel-cluster:accounting"
          Value: rds-parameter-group
        - Key: "parallel-cluster:accounting:scheduler"
          Value: slurm
        - Key: "parallel-cluster:accounting:version"
          Value: "1.0"

  SlurmDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: SubnetGroup
      SubnetIds:
        - !If [CreateVpc, !Ref PublicSubnetA, !Ref PublicSubnetAId]
        - !If [CreateVpc, !Ref PublicSubnetB, !Ref PublicSubnetBId]
  SlurmDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Serverless DB SG"
      VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"

  ServerlessDatabaseClusterSecurityGroupInboundRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: Allow incoming connections from client security group
      FromPort: !GetAtt
        - SlurmDB
        - Endpoint.Port
      GroupId: !GetAtt
        - SlurmDBSecurityGroup
        - GroupId
      SourceSecurityGroupId: !GetAtt
        - ServerlessClusterDatabaseClientSecurityGroup
        - GroupId
      ToPort: !GetAtt
        - SlurmDB
        - Endpoint.Port
  SlurmDB:
    Type: "AWS::RDS::DBCluster"
    Properties:
      Engine: aurora-mysql
      CopyTagsToSnapshot: true
      DBClusterParameterGroupName: !Ref ServerlessDatabaseClusterParameterGroup
      DBSubnetGroupName: !Ref SlurmDBSubnetGroup
      EnableHttpEndpoint: false
      EngineMode: serverless
      MasterUsername: "admin"
      DatabaseName: "EnginFrameDB"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${Password}:SecretString:::}}"
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 8
        MinCapacity: 1
        SecondsUntilAutoPause: 600
      StorageEncrypted: true
      Tags:
        - Key: "parallel-cluster:accounting"
          Value: database
        - Key: "parallel-cluster:accounting:scheduler"
          Value: slurm
        - Key: "parallel-cluster:accounting:version"
          Value: "1.0"
      VpcSecurityGroupIds:
        - !GetAtt
          - SlurmDBSecurityGroup
          - GroupId

  ServerlessClusterDatabaseClientSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security Group to allow connection to Serverless DB Cluster
      Tags:
        - Key: "parallel-cluster:accounting"
          Value: client-security-group
        - Key: "parallel-cluster:accounting:scheduler"
          Value: slurm
        - Key: "parallel-cluster:accounting:version"
          Value: "1.0"
      VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]
  ServerlessClusterDatabaseClientSecurityGroupOutboundRule:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt
        - ServerlessClusterDatabaseClientSecurityGroup
        - GroupId
      IpProtocol: tcp
      Description: Allow incoming connections from PCluster
      DestinationSecurityGroupId: !GetAtt
        - SlurmDBSecurityGroup
        - GroupId
      FromPort: !GetAtt
        - SlurmDB
        - Endpoint.Port
      ToPort: !GetAtt
        - SlurmDB
        - Endpoint.Port

  Cloud9:
    Type: "AWS::Cloud9::EnvironmentEC2"
    DependsOn:
      - Cloud9BootstrapAssociation
      - SlurmDB
    Properties:
      Name: !Ref "AWS::StackName"
      Description: "Cloud9 IDE for AWS ParallelCluster"
      AutomaticStopTimeMinutes: 120
      ImageId: amazonlinux-2-x86_64
      InstanceType: c5.xlarge
      SubnetId: !If [CreateVpc, !Ref PublicSubnetA, !Ref PublicSubnetAId]
      Tags:
        - Key: SSMBootstrap
          Value: !Sub
            - ${AWS::StackName}-${RANDOM}
            - RANDOM:
                !Select [
                  0,
                  !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]],
                ]

  Password:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub "hpc-iu-${AWS::StackName}"
      Description: This the password used for RDS and ec2-user
      SecretString: !Ref AdminPassword

  Cloud9SSMDocument: # Clones iu repo, adds environment variables, and uploads to s3 bucket. Then runs "scripts/Cloud9-Bootstrap.sh" to setup this cloud9 node
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: Bootstrap Cloud9 Instance
        mainSteps:
          - action: aws:runShellScript
            name: C9bootstrap
            inputs:
              runCommand:
                - "#!/bin/bash"
                - if [[ -f /home/ec2-user/environment/lambda.log ]]; then exit 1; fi
                - set -x
                - exec >/home/ec2-user/environment/lambda.log; exec 2>&1
                - echo LANG=en_US.utf-8 >> /etc/environment
                - echo LC_ALL=en_US.UTF-8 >> /etc/environment
                - cd /home/ec2-user/environment
                - git clone "https://github.com/iubh/hpc"
                - !Sub echo "export AWS_DEFAULT_REGION=${AWS::Region}" >> cluster_env
                - !Sub echo "export AWS_REGION_NAME=${AWS::Region}" >> cluster_env
                - !Sub echo "export S3_BUCKET=${Cloud9OutputBucket}" >> cluster_env
                - !Sub echo "export FSX_ID=${FSx}" >> cluster_env
                - !Sub
                  - echo "export AD_ID=${ADId}" >> cluster_env
                  - ADId: !If [CreateAD, !Ref ActiveDirectory, !Ref AD]
                - !Sub
                  - echo "export CUSTOMAD=${CUSTOMAD}" >> cluster_env
                  - CUSTOMAD: !If [CreateAD, "false", "true"]
                - !Sub
                  - echo "export PUBLIC_SUBNET_ID=${FinalPublicSubnetAId}" >> cluster_env
                  - FinalPublicSubnetAId:
                      !If [CreateVpc, !Ref PublicSubnetA, !Ref PublicSubnetAId]
                - !Sub
                  - echo "export PRIVATE_SUBNET_ID=${FinalPrivateSubnetAId}" >> cluster_env
                  - FinalPrivateSubnetAId:
                      !If [
                        CreatePrivateSubnet,
                        !Ref PrivateSubnetA,
                        !Ref PrivateSubnetAId,
                      ]
                - !Sub echo "export CLUSTER_NAME=${AWS::StackName}" >> cluster_env
                - !Sub echo "export ADDITIONAL_SG=${PCAdditionalSecurityGroup}" >> cluster_env
                - !Sub echo "export DB_SG=${ServerlessClusterDatabaseClientSecurityGroup}" >> cluster_env
                - !Sub echo "export WAIT_HANDLE='${WaitHandle}'" >> cluster_env
                - !Sub
                  - echo "export SLURM_DB_ENDPOINT='${DB_ENDPOINT}'" >> cluster_env
                  - DB_ENDPOINT: !GetAtt SlurmDB.Endpoint.Address
                - !Sub
                  - echo "export ALB_PUBLIC_DNS_NAME='${ALB}'" >> cluster_env
                  - ALB: !GetAtt ApplicationLoadBalancer.DNSName
                - !Sub
                  - echo "export NLB_PUBLIC_DNS_NAME='${NLB}'" >> cluster_env
                  - NLB: !GetAtt NetworkLoadBalancer.DNSName
                - !Sub
                  - echo "export KEY_PAIR=\"${AWS::StackName}-${RANDOM}\"" >> cluster_env
                  - RANDOM:
                      !Select [
                        0,
                        !Split [
                          "-",
                          !Select [2, !Split ["/", !Ref "AWS::StackId"]],
                        ],
                      ]
                - !Sub echo "export POST_INSTALL=\"s3://${Cloud9OutputBucket}/iu-hpc/scripts/post.install.sh\"" >> cluster_env
                - !Sub sudo -H -u ec2-user bash -c "aws s3 cp --quiet --recursive iu-hpc \"s3://${Cloud9OutputBucket}/iu-hpc\" --region ${AWS::Region}"
                - chmod -x /home/ec2-user/environment/iu-hpc/scripts/Cloud9-Bootstrap.sh
                - sudo -H -u ec2-user bash -c "bash /home/ec2-user/environment/iu-hpc/scripts/Cloud9-Bootstrap.sh"

  Cloud9BootstrapInstanceLambda:
    Type: Custom::Cloud9BootstrapInstanceLambda
    DependsOn:
      - LambdaExecutionRole
      - ApplicationLoadBalancer
      - NetworkLoadBalancer
      - LogGroupCloud9BootstrapInstanceLambdaFunction
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - Cloud9BootstrapInstanceLambdaFunction
          - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: Cloud9
      LabIdeInstanceProfileName:
        Ref: Cloud9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
          - Cloud9InstanceProfile
          - Arn

  Cloud9BootstrapInstanceLambdaFunction: # Attaches Instance profile to cloud9 instance
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      MemorySize: 256
      Timeout: 600
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse

          def lambda_handler(event, context):
              # logger.info('event: {}'.format(event))
              # logger.info('context: {}'.format(context))
              responseData = {}

              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')

                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      # logger.info('instance: {}'.format(instance))

                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      # logger.info('iam_instance_profile: {}'.format(iam_instance_profile))

                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      # logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          # logger.info('instance_state: {}'.format(instance_state))

                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      # logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      r_ec2 = boto3.resource('ec2')

                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')
                      
                  except Exception as e:
                      # logger.error(e, exc_info=True)
                      responseData = {'Error': traceback.format_exc(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  LogGroupCloud9BootstrapInstanceLambdaFunction: # Creates log group for the Cloud9BootstrapInstanceLambdaFunction
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Cloud9BootstrapInstanceLambdaFunction}
      RetentionInDays: 7

  WaitHandle: # Creates a wait handle, that the Cloud9Bootstrap script writes success to if the cluster creation and setup successful
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition: # Waits for the handle to say success
    Type: AWS::CloudFormation::WaitCondition
    DependsOn:
      - Cloud9BootstrapInstanceLambda
    Properties:
      Handle: !Ref WaitHandle
      Timeout: "3600"

  LambdaGetHeadNodeIP: # Wait until headnode and cluster setup completed
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import logging
          import boto3
          import cfnresponse

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          CFN = boto3.resource('cloudformation')


          def lambda_handler(event, context):
              if event['RequestType'] in ('Create', 'Update'):
                  try:
                      stack = CFN.Stack(event['ResourceProperties']['StackName'])
                      outputs = {
                          output['OutputKey']: output['OutputValue']
                          for output in stack.outputs
                      }
                  except Exception as error:
                      LOGGER.exception(error)
                      cfnresponse.send(event, context, cfnresponse.FAILED, {}, reason=str(error))
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, outputs)
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 10
      MemorySize: 128

  LogGroupLambdaGetHeadNodeIP:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaGetHeadNodeIP}
      RetentionInDays: 7

  HeadNodeIP: # After cluster created (previous lambda reports success), gets HeadNode IP
    Type: Custom::HeadNodeIP
    DependsOn:
      - WaitCondition
      - LogGroupLambdaGetHeadNodeIP
    Properties:
      ServiceToken: !GetAtt LambdaGetHeadNodeIP.Arn
      StackName: !Sub "hpc-iu-${AWS::StackName}"

  LowerCaseLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: Returns the lowercase version of a string
      MemorySize: 256
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import cfnresponse

          def lambda_handler(event, context):                                                    
              output = event['ResourceProperties'].get('InputString', '').lower()                
              responseData = {'OutputString': output}                                            
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  LogGroupLowerCaseLambda:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${LowerCaseLambda}
      RetentionInDays: 7

  S3BucketName:
    Type: Custom::Lowercase
    DependsOn: LogGroupLowerCaseLambda
    Properties:
      ServiceToken: !GetAtt LowerCaseLambda.Arn
      InputString: !Sub
        - ${AWS::StackName}-${RANDOM}
        - RANDOM:
            !Select [
              0,
              !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]],
            ]

  Cloud9OutputBucket: # Creates Bucket to hold postinstall scripts - need to retain bucket after delete, because bucket needs to be empty to successfully delete
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Join
        - ""
        - - !GetAtt S3BucketName.OutputString

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVpc
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: s3
            Effect: Allow
            Principal: "*"
            Action: s3:*
            Resource: "*"
      RouteTableIds:
        - !Ref PublicRouteTable
        - !If [
            CreatePrivateSubnet,
            !Ref PrivateRouteTableA,
            !Ref "AWS::NoValue",
          ]
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  LBInit: # Sets up Application Load Balancer, adding certificates etc.
    Type: Custom::LBInit
    DependsOn:
      - LogGroupLBInitLambda
    Properties:
      ServiceToken: !GetAtt LBInitLambda.Arn
      DNSName: !GetAtt ApplicationLoadBalancer.DNSName

  LogGroupLBInitLambda:
    Type: AWS::Logs::LogGroup
    DependsOn: LBInitLambda
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${LBInitLambda}
      RetentionInDays: 7

  LBInitLambda: # Create ALB certificate
    Type: AWS::Lambda::Function
    Properties:
      Description: Create ALB Certificate
      Timeout: 300
      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt "LBInitRole.Arn"
      Code:
        ZipFile: |
          import boto3
          import os
          import subprocess
          import time
          import cfnresponse
          from botocore.exceptions import ClientError
          def handler(event, context):
              print(event)
              data = {}
              try:
                  if event['RequestType'] == 'Create':
                      IamCertificateArn = create_certificate(event)
                      data['IamCertificateArn'] = IamCertificateArn
                  elif event['RequestType'] == 'Delete':
                      delete_certificate(event)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, data)
              except ClientError as e:
                  data['ClientErrorCode'] = e.response['Error']['Code']
                  data['ClientErrorMessage'] = e.response['Error']['Message']
                  cfnresponse.send(event, context, cfnresponse.FAILED, data)
              except Exception as e:
                  data['Exception'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, data)
          def create_certificate(event):
              DNSName = event['ResourceProperties']['DNSName']
              os.chdir('/tmp')
              config = open('/tmp/openssl.cnf', 'w+')
              config.write('[req]\nprompt=no\ndistinguished_name=enginframe\nx509_extensions=v3_req\n')
              config.write('[enginframe]\nC=US\nST=WA\nL=Seattle\nO=AWS WWSO\nOU=HPC\nCN=EnginFrame\n')
              config.write('[v3_req]\nkeyUsage=keyEncipherment,dataEncipherment,digitalSignature\nextendedKeyUsage=serverAuth\nsubjectAltName=@alt_names\n')
              config.write('[alt_names]\nDNS.1={}\n'.format(DNSName))
              config.close()
              os.environ['RANDFILE']='/tmp/.rnd'
              subprocess.run([
                  'openssl', 'req', '-new', '-x509', '-nodes',
                  '-newkey', 'rsa:2048', '-days', '3650',
                  '-keyout', '/tmp/key.pem', '-out', '/tmp/crt.pem',
                  '-config', '/tmp/openssl.cnf'
              ])
              os.remove('/tmp/openssl.cnf')
              keyfile = open('/tmp/key.pem', 'r')
              key = keyfile.read()
              keyfile.close()
              os.remove('/tmp/key.pem')
              crtfile = open('/tmp/crt.pem', 'r')
              crt = crtfile.read()
              crtfile.close()
              os.remove('/tmp/crt.pem')
              iam = boto3.client('iam')
              response = iam.upload_server_certificate(
                  ServerCertificateName=DNSName,
                  CertificateBody=crt,
                  PrivateKey=key
              )
              time.sleep(10)
              return response['ServerCertificateMetadata']['Arn']
          def delete_certificate(event):
              time.sleep(60)
              DNSName = event['ResourceProperties']['DNSName']
              iam = boto3.client('iam')
              response = iam.delete_server_certificate(ServerCertificateName=DNSName)

  LBInitRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: EFLoadBalancer
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: iam
                Effect: Allow
                Action:
                  - iam:UploadServerCertificate
                  - iam:DeleteServerCertificate
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:server-certificate/${ApplicationLoadBalancer.DNSName}"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}"
      Subnets:
        - !If [CreateVpc, !Ref PublicSubnetA, !Ref PublicSubnetAId]
        - !If [CreateVpc, !Ref PublicSubnetB, !Ref PublicSubnetBId]
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 180

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        - !If [CreateVpc, !Ref PublicSubnetA, !Ref PublicSubnetAId]
        - !If [CreateVpc, !Ref PublicSubnetB, !Ref PublicSubnetBId]
      Type: network

  LdapTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-Ldap"
      Port: 389
      Protocol: TCP
      VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 389
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      Targets:
        - Id:
            !If [
              CreateAD,
              !Select [0, !GetAtt ActiveDirectory.DnsIpAddresses],
              !Ref ADDNS0,
            ]
          Port: 389
        - Id:
            !If [
              CreateAD,
              !Select [1, !GetAtt ActiveDirectory.DnsIpAddresses],
              !Ref ADDNS1,
            ]
          Port: 389
      TargetType: ip

  LdapListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LdapTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 636
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
        - CertificateArn: !GetAtt LBInit.IamCertificateArn

  HTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates:
        - CertificateArn: !GetAtt LBInit.IamCertificateArn
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref TargetGroupEF
          Type: "forward"

  GrafanaListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupMonitoring
      Conditions:
        - Field: path-pattern
          Values:
            - "/grafana*"
      ListenerArn: !Ref HTTPSListener
      Priority: 1

  PrometheusListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupMonitoring
      Conditions:
        - Field: path-pattern
          Values:
            - "/prometheus*"
      ListenerArn: !Ref HTTPSListener
      Priority: 2

  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"

  TargetGroupEF:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - HeadNodeIP
    Properties:
      Name: !Sub "${AWS::StackName}-EF"
      VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]
      Port: 8443
      Protocol: HTTPS
      Targets:
        - Id: !Sub "${HeadNodeIP.HeadNodePrivateIP}"
      TargetType: ip

  TargetGroupMonitoring:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - HeadNodeIP
    Properties:
      Name: !Sub "${AWS::StackName}-Monitoring"
      VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Sub "${HeadNodeIP.HeadNodePrivateIP}"
      TargetType: ip
      HealthCheckPath: "/grafana"
      Matcher:
        HttpCode: "200,301,302"

  AvailabiltyZone1:
    Type: Custom::AvailabiltyZone
    DependsOn: LogGroupGetAZLambdaFunction
    Properties:
      ServiceToken: !GetAtt GetAZLambdaFunction.Arn
      ZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", ZoneId1]

  AvailabiltyZone2:
    Type: Custom::AvailabiltyZone
    DependsOn: LogGroupGetAZLambdaFunction
    Properties:
      ServiceToken: !GetAtt GetAZLambdaFunction.Arn
      ZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", ZoneId2]

  LogGroupGetAZLambdaFunction:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAZLambdaFunction}
      RetentionInDays: 7

  GetAZLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: GetAZLambdaFunction
      Timeout: 60
      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt GetAZLambdaRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          from json import dumps
          from boto3 import client
          EC2 = client('ec2')
          def handler(event, context):
              if event['RequestType'] in ('Create', 'Update'):
                  print(dumps(event, default=str))
                  data = {}
                  try:
                      response = EC2.describe_availability_zones(
                          Filters=[{'Name': 'zone-id', 'Values': [event['ResourceProperties']['ZoneId']]}]
                      )
                      print(dumps(response, default=str))
                      data['ZoneName'] = response['AvailabilityZones'][0]['ZoneName']
                  except Exception as error:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {}, reason=error)
                  finally:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, data)
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-GetAZLambdaFunction

  GetAZLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Description: GetAZLambdaFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: GetAZLambdaFunction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ec2
                Effect: Allow
                Action:
                  - ec2:DescribeAvailabilityZones
                Resource:
                  - "*"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-GetAZLambdaFunction

  ActiveDirectory: # Create Managed Active Directory (standard) to handle cluster users
    Type: AWS::DirectoryService::MicrosoftAD
    Condition: CreateAD
    Properties:
      Edition: Standard
      Name: corp.iu.org
      Password: !Sub "{{resolve:secretsmanager:${Password}:SecretString:::}}"
      ShortName: corp
      VpcSettings:
        SubnetIds:
          - !If [CreateVpc, !Ref PublicSubnetA, !Ref PublicSubnetAId]
          - !If [CreateVpc, !Ref PublicSubnetB, !Ref PublicSubnetBId]
        VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]

Outputs:
  Cloud9URL:
    Description: Cloud9 Environment
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/${Cloud9}"
  WebURL:
    Description: "EnginFrame HPC Portal and Grafana Monitoring Dashboard."
    Value: !Sub
      - "https://${ALB}/"
      - ALB: !GetAtt ApplicationLoadBalancer.DNSName
